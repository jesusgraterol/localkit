import select from '@inquirer/select';
import { input } from '@inquirer/prompts';
import { print } from '../shared/utilities/utilities.js';
import { generate, validate } from './random-bytes.service.js';

/* ************************************************************************************************
 *                                        MODULE LAUNCHER                                         *
 ************************************************************************************************ */
export default async function launcher() {
  // read the user input
  const answer = await select({
    message: 'Select an action',
    choices: [
      {
        name: 'Generate',
        value: 'generate',
        description: 'Generate a sequence of random bytes',
      },
      {
        name: 'Validate',
        value: 'validate',
        description: 'Verify if a sequence of random characters was generated by this module',
      },
    ],
    loop: false,
  });

  // execute the apropriate action
  switch (answer) {
    case 'generate': {
      // extract the configuration
      const answers = {
        size: await input({
          message: 'Enter the desired size (bytes to generate)',
          default: '128',
          validate: ((v) => v.length > 0 && !Number.isNaN(v) && v >= 6 && v <= 2000000000),
        }),
      };

      // generate the secret
      const secret = generate(Number(answers.size));

      // output it
      print('RandomBytesService.generate', [
        `Secret (${answers.size} bytes | ${secret.length} characters):`,
        secret,
      ], true);
      break;
    }
    case 'validate': {
      const secret = await input({ message: 'Enter the secret', validate: ((v) => v.length > 0) });
      print('RandomBytesService.validate', [
        `${validate(secret) ? 'VALID' : 'INVALID'} Base64URL Secret:`,
        secret,
      ]);
      break;
    }
    default:
      throw new Error('The selected action is invalid');
  }
}
