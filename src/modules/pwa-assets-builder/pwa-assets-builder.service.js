import Utilities from '../shared/utilities/utilities.js';
import FileSystemService from '../shared/file-system/file-system.service.js';
import PWAAssetsBuilderUtils from './pwa-assets-builder.utils.js';

/**
 * PWA Assets Builder Service Factory
 * Service in charge of building all the assets required for a PWA to be properly published.
 */
const pwaAssetsBuilderServiceFactory = () => {
  /* *******************
   * MODULE PROPERTIES *
   ******************* */

  // the exact width and height the logo image needs to be in order for the assets to be generated
  const __LOGO_DIMENSIONS_REQUIREMENT = { width: 1024, height: 1024 };

  // the list of assets that will be generated by category.
  // The logo scale is a float and can range from 0 - 1
  const __OUTPUT = {
    icons: [
      { dimensions: { width: 48, height: 48 }, logoScale: 0.037 },
      { dimensions: { width: 72, height: 72 }, logoScale: 0.047 },
      { dimensions: { width: 96, height: 96 }, logoScale: 0.06 },
      { dimensions: { width: 120, height: 120 }, logoScale: 0.072 },
      { dimensions: { width: 128, height: 128 }, logoScale: 0.076 },
      { dimensions: { width: 144, height: 144 }, logoScale: 0.087 },
      { dimensions: { width: 152, height: 152 }, logoScale: 0.092 },
      { dimensions: { width: 168, height: 168 }, logoScale: 0.105 },
      { dimensions: { width: 180, height: 180 }, logoScale: 0.112 },
      { dimensions: { width: 192, height: 192 }, logoScale: 0.12 },
      { dimensions: { width: 384, height: 384 }, logoScale: 0.24 },
      { dimensions: { width: 512, height: 512 }, logoScale: 0.32 },
      { dimensions: { width: 1024, height: 1024 }, logoScale: 0.65 },
    ],
  };





  /* **************
   * ASSETS BUILD *
   ************** */

  /**
   * Builds an asset and saves it in the appropriate category.
   * @param {*} baseDirPath
   * @param {*} logoSourcePath
   * @param {*} backgroundColor
   * @param {*} asset
   * @returns Promise<void>
   */
  const __buildAsset = async (baseDirPath, logoSourcePath, backgroundColor, asset) => {
    // generate the background image
    const bgImage = PWAAssetsBuilderUtils.generateBackgroundImage(
      { width: asset.dimensions.width, height: asset.dimensions.height },
      backgroundColor,
    );

    // generate the logo image
    const logoImage = await PWAAssetsBuilderUtils.generateLogoImage(
      logoSourcePath,
      asset,
      __LOGO_DIMENSIONS_REQUIREMENT,
    );

    // compose the asset image and save it
    await bgImage.composite(
      [{ input: logoImage, blend: 'over' }],
    ).toFile(`${baseDirPath}/${PWAAssetsBuilderUtils.generateAssetName(asset.dimensions)}`);
  };

  /**
   * Builds all the assets for a given category.
   * @param {*} assetsRootPath
   * @param {*} logoSourcePath
   * @param {*} backgroundColor
   * @param {*} category
   */
  const __buildCategory = async (assetsRootPath, logoSourcePath, backgroundColor, category) => {
    // create the base dir
    const baseDirPath = `${assetsRootPath}/${category}`;
    await FileSystemService.makeDirectory(baseDirPath);

    // build all the assets
    await Promise.all(__OUTPUT[category].map((asset) => __buildAsset(
      baseDirPath,
      logoSourcePath,
      backgroundColor,
      asset,
    )));
  };




  /* ***************
   * BUILD PROCESS *
   *************** */

  /**
   * Performs the build action and outputs the result in a directory like
   * pwa-assets-build-${TIMESTAMP}
   * @param {*} logoSourcePath
   * @param {*} backgroundColor
   * @returns Promise<string>
   */
  const build = async (logoSourcePath, backgroundColor) => {
    // initialize the identifier as well as the assets' root path
    const id = Utilities.generateBuildID('pwa-assets');
    const assetsRootPath = `${id}/pwa-assets`;

    // create the build and the assets root dirs
    await FileSystemService.makeDirectory(id);
    await FileSystemService.makeDirectory(assetsRootPath);

    try {
      // init the output's categories
      const categories = Object.keys(__OUTPUT);

      // generate all the assets for all of the categories
      await Promise.all(categories.map((category) => __buildCategory(
        assetsRootPath,
        logoSourcePath,
        backgroundColor,
        category,
      )));

      // generate the manifest file
      // @TODO

      // generate the receipt
      // @TODO

      // create a copy of the source file
      await FileSystemService.copyFile(logoSourcePath, `${id}/source.png`);

      // finally, return the id
      return id;
    } catch (e) {
      // in case of failure, remove the build directory and rethrow the error
      await FileSystemService.deleteDirectory(id);
      throw e;
    }
  };



  /* **************
   * MODULE BUILD *
   ************** */
  return Object.freeze({
    // build process
    build,
  });
};




/**
 * Global Instance
 */
const PWAAssetsBuilderService = pwaAssetsBuilderServiceFactory();




/**
 * Module Exports
 */
export default PWAAssetsBuilderService;
